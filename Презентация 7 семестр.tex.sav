\documentclass[pdf, 8pt, unicode]{beamer}

\usepackage[cp1251]{inputenc}
\usepackage[english,russian]{babel}

\usepackage{hyperref}
\usepackage{ragged2e}
\usepackage{skak}
\usepackage[version=3]{mhchem}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{microtype}
\usepackage{listings}
\usepackage{color}
\usepackage{tikz}
\usepackage{beamerthemesplit}
\usepackage{epstopdf}
\setbeamerfont{institute}{size=\normalsize}
\setbeamercolor{bluetext_color}{fg=blue}
\newcommand{\bluetext}[1]{{\usebeamercolor[fg]{bluetext_color}#1}}
\setbeamercovered{transparent}
\hypersetup{pdfpagemode=FullScreen}
\institute{
Бурятский государственный университет \\
Институт математики и информатики \\
Кафедра прикладной математики \\

\vspace{0.5cm}

 Научный руководитель --- асс. каф. ИТ {\bf Брагин Александр Фёдорович}\\
 }

\title[Метод бросания лучей]{Рендеринг
псевдотрёхмерного пространства
методом бросания лучей}

\author{Шорников Александр Евгеньевич, группа 05230}

 \date{
    Улан-Удэ\\
    2016г.
}

\begin{document}
\begin{frame}
  % создаём титульный лист
  \maketitle
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}\frametitle{Введение}
       \vspace{0.5cm}

\textbf{Цель} дипломного проекта:\\
Разработать инструментарий для создания интерактивных планов помещений для интернет-сайтов организаций:\\
- редактор плана помещения; \\
- интерактивная визуализация; \\
- поиск оптимального маршрута на плане и визуализация его прохождения;\\
- создание интерактивной карты корусов БГУ для сайта ИМИ.\\

       \vspace{0.5cm}

 \textbf{Цель} данной курсовой работы:\\
- выбор и изучение технологии рейкастинга;\\
- убедиться в возможности реализации;\\
- убедиться применимости для решения задачи проекта;\\
- реализовать прототип.\\

\end{frame}
\begin{frame}\frametitle{Технология рейкастинга}
Метод бросания лучей(англ. Raycasting, "Рейкастинг") - это технология получения изображения по модели с помощью компьютерной
программы, позволяющая создавать 3D перспективу в 2D картах. По сути, это  метод  преобразования ограниченной  формы  данных
(очень простая карта этажа) в трёхмерную проекцию с помощью  трассировки  лучей  из точки обзора в объём обзора.
\begin{figure}[h!]
\begin{center}
\includegraphics[width=5cm]{p_1}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Обоснование выбора рейкастинга}
Основное преимущество технологии рейкастинга перед WebGL - поддержка любыми браузерами
\begin{figure}[h!]
\begin{center}
\includegraphics[width=7cm]{p_2}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Технология рейкастинга}
Каждому значению х на экране (для каждой вертикальной линии на экране) соответствует луч,
который исходит из местонахождения игрока и направление которого зависит от двух критериев: направление взгляда игрока и
координата х на экране
\begin{figure}[h!]
\begin{center}
\includegraphics[width=10cm]{ris2_0}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Описание метода}
Карта уровня представляет собой 2D-решетку с квадратными ячейками (двухмерный массив),
где значением каждой ячейки может быть равно 0, что означает отсутствие стены, либо положительное число, означающее стену
определенного цвета или текстуры. \\
\begin{figure}[h!]
\begin{center}
\includegraphics[width=10cm]{ris2_1}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Описание метода}
На рисунке в ракурсе <<сверху вниз>> представлены два луча (выделены красным), которые исходят от игрока зеленя точка) и упираются в синюю стену.
\begin{figure}[h!]
\begin{center}
\includegraphics[width=4cm]{ris2_2}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Описание метода}
Чтобы обнаружить первую стену, которую луч встречает на своем пути, необходимо, чтобы он исходил из точки местоположения
игрока, а затем нужно все время проверять, не находится ли луч внутри стены
\begin{figure}[h!]
\begin{center}
\includegraphics[width=4cm]{ris2_3}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Описание метода}
Одним из наиболее удобных методов построения прямой линии состоит в решении дифференциального уравнения, 
описывающего этот процесс. Для прямой линии имеем:
\begin{equation*}
\frac{dy}{dx} = const
\end{equation*}
\begin{equation*}
\frac{\Delta y}{\Delta x} = \frac{y_{2}-y_{1}}{x_{2}-x_{1}}
\end{equation*}
Решение представляется в виде:
\begin{equation*}
y_{i+1} = y_{i} + \Delta y
\end{equation*}
\begin{equation*}
y_{i+1} = y_{i} + \frac{y_{2}-y_{1}}{x_{2}-x_{1}}\Delta x
\end{equation*}
где $x_1$, $y_1$ и $x_2$, $y_2$ - концы разлагаемого отрезка и $y_i$ - начальное значение для очередного шага вдоль отрезка. 
То есть, данное уравнение представляет собой рекуррентное соотношение для последовательных значений $y$ вдоль 
нужного отрезка. Этот метод называется Цифровой Дифференциальный Анализ(DDA)
\end{frame}
\begin{frame}\frametitle{Описание метода}
\textbf{Процедура построения отрезка согласно \\
методу цифрового дифференциального анализа (DDA):}\\ 
//выполнить цифровой дифференциальный анализ
      while (hit == 0){
        //перейти на следующий квардрат в направлении х или у
        if (sideDistX < sideDistY){
          sideDistX += deltaDistX;
          mapX += stepX;
          side = 0;
        }
        else{
          sideDistY += deltaDistY;
          mapY += stepY;
          side = 1;
        }
        //Проверка если луч врезался в стену
        if (worldMap[mapX][mapY] > 0)
            hit = 1;
      
\end{frame}
\begin{frame}\frametitle{Описание метода}
Определение задетых ячеек методом Цифрового Дифференциального Анализа(DDA):
\begin{figure}[h!]
\begin{center}
\includegraphics[width=4cm]{ris2_5}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Описание метода}
Рейкастинг работает с векторами для задания угла обзора и
камеры: положение игрока всегда является вектором
\begin{figure}[h!]
\begin{center}
\includegraphics[width=6cm]{ris2_6}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Описание метода}
При вращении игрока камера также должна вращаться, следовательно, и вектор направления, и вектор плоскости камеры также должны
поворачиваться вместе с ними. Далее все остальные лучи будут вращаться автоматически
\begin{figure}[h!]
\begin{center}
\includegraphics[width=4cm]{ris2_10}\\
\end{center}
\end{figure}
Чтобы повернуть вектор, необходимо рассчитать его по следующему шаблону вращения:\\
\begin{equation*}
\begin{vmatrix}
cos(\alpha) & -sin(\alpha)\\
sin(\beta) & cos(\beta)
\end{vmatrix}
\end{equation*}
\end{frame}
\begin{frame}\frametitle{Реализация прототипа}
Для реализации протипа использовался фреймворк $Qt$ для C++. Работоспособность
была проверена под операционными системами $Android$, $Linux~Mint~18$ и $Windows~10$.\\
\begin{figure}[h!]
\begin{center}
\includegraphics[width=10cm]{s_0}\\
\end{center}
\end{figure}

Исходный код доступен всем желающим по ссылке: \textit{https://github.com/chetca/Raycasting}
\end{frame}
\begin{frame}\frametitle{Реализация прототипа}
В качестве примера был сконструирован план уровня 2 этажа 1 корпуса БГУ:
\begin{figure}[h!]
\begin{center}
\includegraphics[width=10cm]{pl_1}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Реализация прототипа}
План уровня 2 этажа 1 корпуса БГУ в виде уровня
\begin{figure}[h!]
\begin{center}
\includegraphics[width=10cm]{pl_2}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Реализация прототипа}
Скриншоты работающего прототипа:
\begin{figure}[h!]
\begin{center}
\includegraphics[width=10cm]{scr}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Реализация прототипа}
Скриншоты работающего прототипа:
\begin{figure}[h!]
\begin{center}
\includegraphics[width=10cm]{s_1}\\
\end{center}
\end{figure}
\end{frame}
\begin{frame}\frametitle{Дальнейшие планы:}
       \vspace{0.5cm}

Разработать инструментарий для создания интерактивных планов помещений для интернет-сайтов организаций:\\
- переписать прототип на языке JavaScript;\\
- написать редактор плана помещения; \\
- поиск оптимального маршрута на плане и визуализация его прохождения;\\
- внедрение интерактивной карты корусов БГУ на сайт ИМИ.\\
\end{frame}
\end{document}
